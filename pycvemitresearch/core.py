#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests
from typing import Optional, Dict, MutableMapping

from urllib.parse import urljoin
import xmltojson
import xmltodict
import json
import xml.etree.ElementTree as ET
import os
import html_to_json

class CVEMITRESearch(object):

    def __init__(self, base_url: str='https://cve.mitre.org/', proxies: MutableMapping[str, str]={}, timeout: Optional[int]=None, verify=True):
        self.base_url = base_url
        self.session = requests.Session()
        self.session.proxies = proxies
        self.session.headers.update({
            'content-type': 'application/xml',
            'User-Agent': 'PyCVEMITRESearch - python wrapper'})
        self.timeout = timeout
        self.verify = verify

    def _http_get(self, api_call, query=None):
        if query is None:
            url = urljoin(self.base_url, f'cgi-bin/cvekey.cgi?{api_call}')
        else:
            url = urljoin(self.base_url, f'cgi-bin/cvekey.cgi?{api_call}={query}')
        return self.session.get(url, timeout=self.timeout, verify=self.verify)

    def _http_get_cve(self, api_call, query=None):
        if query is None:
            url = urljoin(self.base_url, f'cgi-bin/cvename.cgi?{api_call}')
        else:
            url = urljoin(self.base_url, f'cgi-bin/cvename.cgi?{api_call}={query}')
        return self.session.get(url, timeout=self.timeout, verify=self.verify)

    def cveinfo(self, param) -> Dict:
        """ cveinfo() returns a more information about the CVE"""
        data = self._http_get_cve('name', query=param)
        html= data.text
        with open("html_cveinfo.html", "w") as f:
            new_html = html.replace("ï»¿","")
            f.write(new_html)

        with open("html_cveinfo.html") as html_file:
            output_json_dict = html_to_json.convert(html_file)
            #print(type(output_json_dict))#is a dict
            #print(output_json_dict)
            """for i in output_json_dict:
                print(f'This is i: {i}')""" #keys of dict(_values and html)
            html_json= output_json_dict["html"] #html key
            for a in html_json:
                #print(type(a))#is a dict
                #print(a)
                """for b in a:
                    print(b)"""#keys in html
                div = a['div'] #working with div page
                CenterP= div[3] #div id= Center Pane
                BreadCrumbs= div[1] #div id= BreadCrumbs
                Breadvalues= BreadCrumbs['_values'][1]
                #print(Breadvalues)
                LiteralNoresults= "ERROR"
                # When there aren't results
                if LiteralNoresults in Breadvalues:
                    Noresults = CenterP['h2'][0]['_value']  # ERROR 'CVE' is a malformed CVE-ID
                    Examples = CenterP['p'][1]['p'][0]['b'][0]['_value']  # Examples of CVE-ID's that conform to the syntax
                    print(f'{Noresults}, {Examples}')
                else:
                    CenterPdiv= CenterP['div']
                    results = CenterPdiv[0]['table'] # when there are results
                    #print(CenterP['div'])
                    #print(results)
                    for i in results:
                        tr= i['tr']
                        td= tr[1]['td']
                        CVE= td[0]['h2'][0]['_value']
                        info= td[1]
                        NIST= info['div'][0]['a'][0]['_attributes']['href']
                        Description= tr[3]['td'][0]['_value']
                        AssignCNA = tr[7]['th'][0]['_value']
                        CNA = tr[8]['td'][0]['_value']
                        Datecreated = tr[10]['td'][0]['b'][0]['_value']
                        References = tr[4]['th'][0]['_value']
                        Referencesinfo = tr[6]['td'][0]['ul'][0]['li'][0]['a'][0]['_attributes']['href']
                        # Print results:
                        print(f'CVE: {CVE}')
                        print(f'More information in NIST: {NIST}')
                        print(f'Description: {Description}')
                        print(f'{AssignCNA}: {CNA}')
                        print(f'Date created: {Datecreated}')
                        print(f'{References}: {Referencesinfo}')




    def keyword(self, param) -> Dict:
        """ keyword() returns a list containing all the CVE and description per vendor"""
        data = self._http_get('keyword', query=param)
        html = data.text
        with open("html_cve.html", "w") as f:
            new_html = html.replace("ï»¿","")
            f.write(new_html)

        with open("html_cve.html") as html_file:
            output_json_dict = html_to_json.convert(html_file)
            #print(type(output_json_dict))#is a dict
            #print(output_json_dict)
            """for i in output_json_dict:
                print(f'This is i: {i}')""" #keys of dict(_values and html)
            html_json= output_json_dict["html"] #html key
            #print(type(html_json)) #Is a list
            #print(html_json)
            for a in html_json:
                #print(type(a))#is a dict
                #print(a)
                """for b in a:
                    print(b)"""#keys in html
                div = a['div'] #working with div page
                CenterP= div[3] #div id= Center Pane
                #print(f'This is div[2]: {div[3]}')
                CenterPdiv= CenterP['div']
                Noresults = CenterPdiv[0] # when there aren't results
                vNores = Noresults['b']
                resultscve= vNores[0]['_value']
                if resultscve == "0":
                    print("There are 0 CVE Records that match your search")
                if resultscve  > "0":
                    print(f"There are {resultscve} CVE Records that match your search:")
                    #print(CenterP['div'])
                    TableCenterP = CenterPdiv[1]
                    #print(TableCenterP)
                    ATableCenterP= TableCenterP['table']#Search results table
                    #print(ATableCenterP)
                    trTableCenterP = ATableCenterP[0]['tr']
                    #print(ATableCenterP[0]['tr'])
                    lentr= len(trTableCenterP)
                    #print(trTableCenterP[0]['td'])
                    for c in trTableCenterP:
                        td= c['td']
                        #print(c['td'])#all keys of c
                        for d in td:
                            a = "a"
                            v = "_value"
                            #print(d)
                            if a in d.keys():
                                tda = d['a']  # CVE
                                for va in tda:
                                    CVE = va['_value']
                                    attrib = va['_attributes']
                                    href =attrib['href'] #URL for CVE details
                                        #print(href)
                                    #print(f'Im printing value a {CVE}')
                            if v in d:
                                description = d['_value']  # Description
                                print(f'{CVE} - {description}')
                        """for e in d:
                            print(e)"""







